import telebot
from telebot import types
from PIL import Image
from rembg import remove
import io
import time
from googletrans import Translator
from gtts import gTTS  # مكتبة لتحويل النص إلى صوت
import tempfile

TOKEN = "7940829250:AAGQrkZMBHpksmrp1XZm9esOwxG32cUWJPo"
bot = telebot.TeleBot(TOKEN)
translator = Translator()

# قائمة اللغات المدعومة الآن تشمل العربية، الإنجليزية، الألمانية، والفرنسية
SUPPORTED_LANGUAGES = ['ar', 'en', 'de', 'fr']

@bot.message_handler(commands=["start"])
def welcome(message):
    bot.send_message(message.chat.id, text="السلام عليكم ! أرسل لي صورة لتعديلها أو نص لترجمتة--يساعدك البوت بتغير خلفية اي صورة وترجمة الكلمة باربع لغات .")

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    bot.send_chat_action(message.chat.id, 'upload_photo')
    try:
        photo_id = message.photo[-1].file_id
        file_info = bot.get_file(photo_id)
        file = bot.download_file(file_info.file_path)
        image = Image.open(io.BytesIO(file))
        image.thumbnail((800, 800))

        bot.send_message(message.chat.id, "جاري معالجة الصورة...")

        # إزالة الخلفية
        output = remove(image)

        bot.send_message(message.chat.id, text="تم إزالة الخلفية! الآن أرسل لي صورة خلفية جديدة.")

        # تعيين المتغير 'output' في النطاق العام
        bot.register_next_step_handler(message, lambda bg_message: handle_background_photo(bg_message, output, image.size))

    except Exception as e:
        print(f"Error processing photo: {e}")
        bot.send_message(message.chat.id, "حدث خطأ أثناء معالجة الصورة.")

def handle_background_photo(bg_message, output, original_size):
    bot.send_chat_action(bg_message.chat.id, 'upload_photo')
    try:
        bg_photo_id = bg_message.photo[-1].file_id
        bg_file_info = bot.get_file(bg_photo_id)
        bg_file = bot.download_file(bg_file_info.file_path)
        bg_image = Image.open(io.BytesIO(bg_file)).resize(original_size)

        # دمج الصور
        combined_image = Image.new('RGBA', bg_image.size)
        combined_image.paste(bg_image, (0, 0))
        combined_image.paste(output, (0, 0), output)

        final_image_io = io.BytesIO()
        combined_image.save(final_image_io, format='PNG')
        final_image_io.seek(0)
        bot.send_photo(bg_message.chat.id, final_image_io)

    except Exception as e:
        print(f"Error processing background photo: {e}")
        bot.send_message(bg_message.chat.id, "حدث خطأ أثناء معالجة صورة الخلفية.")

@bot.message_handler(func=lambda message: True)
def translate_message(message):
    text = message.text
    if any("\u0600" <= char <= "\u06FF" for char in text):  # Arabic
        show_language_buttons(message, 'en', 'de', 'fr', text)
    elif any("a" <= char.lower() <= "z" for char in text):  # English
        show_language_buttons(message, 'ar', 'de', 'fr', text)
    elif any("\u00C0" <= char <= "\u00FF" for char in text):  # French
        show_language_buttons(message, 'ar', 'en', 'de', text)
    elif any("\u00C4" <= char <= "\u00FC" for char in text):  # German
        show_language_buttons(message, 'ar', 'en', 'fr', text)
    else:
        bot.send_message(message.chat.id, "يرجى إدخال نص باللغة العربية أو الإنجليزية أو الفرنسية أو الألمانية.")


def show_language_buttons(message, lang1, lang2, lang3, original_text):
    original_text = original_text[:50]  # تقليص طول النص لتجنب المشاكل
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton(f"ترجم إلى {lang1.upper()}", callback_data=f'translate_{lang1}_{original_text}'),
        types.InlineKeyboardButton(f"ترجم إلى {lang2.upper()}", callback_data=f'translate_{lang2}_{original_text}'),
        types.InlineKeyboardButton(f"ترجم إلى {lang3.upper()}", callback_data=f'translate_{lang3}_{original_text}')
    )
    bot.send_message(message.chat.id, "اختر اللغة التي تريد الترجمة إليها:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('translate_'))
def handle_translation_callback(call):
    try:
        _, lang, original_text = call.data.split('_', 2)
        if lang not in SUPPORTED_LANGUAGES:
            raise ValueError(f'Invalid destination language: {lang}')
        translated_text = translator.translate(original_text, dest=lang)

        # إرسال النص المترجم مع خيار لتحويله إلى صوت
        bot.send_message(call.message.chat.id, translated_text.text)
        
        # تحويل النص المترجم إلى صوت
        tts = gTTS(text=translated_text.text, lang=lang)
        with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as temp_audio:
            tts.save(temp_audio.name)
            temp_audio.seek(0)
            bot.send_audio(call.message.chat.id, open(temp_audio.name, 'rb'))

    except Exception as e:
        bot.send_message(call.message.chat.id, f"حدث خطأ: {str(e)}")

bot.polling(timeout=60)
